services:
  postgres:
    image: postgres:17
    container_name: postgres
    env_file: .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - kryptos-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    command: ["postgres", "-c", "ssl=off"]

  rest-api:
    build:
      context: ./backend/rest-api
      dockerfile: Dockerfile.dev
    container_name: rest-api
    ports:
      - "8080:8080"
    volumes:
      - ./backend/rest-api:/app
    networks:
      - kryptos-network
    env_file: .env
    depends_on:
      - postgres

  worker-server:
    build:
      context: ./backend/worker-server
      dockerfile: Dockerfile
    container_name: worker-server
    ports:
      - "8081:8080"
    volumes:
      - ./backend/worker-server:/app
    networks:
      - kryptos-network
    env_file: .env
    depends_on:
      - postgres

# client:
#   build:
#     context: ./client
#     dockerfile: Dockerfile
#   container_name: client
#   ports:
#     - "3000:3000"
#   volumes:
#     - ./client:/app
#   networks:
#     - kryptos-network
#   env_file: .env
#   depends_on:
#     - rest-api

networks:
  kryptos-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
